datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum to define the user roles for the paywall
enum UserRole {
  FREE
  PAID
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  username  String   @unique
  email     String   @unique
  password  String
  role      UserRole @default(FREE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- Relations ---
  cvs             CV[]
  jobDescriptions JobDescription[]
  analyses        Analysis[]
  orders          Order[]
}

model CV {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  originalName String
  cloudinaryPublicId  String
  fileUrl      String    @unique
  isGuest      Boolean   @default(false)
  expiresAt    DateTime? // We'll use this field later for a cleanup job

  // --- Relations ---
  userId       String?   @db.ObjectId
  user         User?     @relation(fields: [userId], references: [id])
  analyses     Analysis[]

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model JobDescription {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  company          String
  location         String?   
  employmentType   String?   
  experienceLevel  String?   
  summary          String?   
  keySkills        String[]  
  responsibilities String[]  
  requirements     String[]  
  originalText     String
  isGuest          Boolean   @default(false)
  expiresAt        DateTime?

  // --- Relations ---
  userId           String?   @db.ObjectId
  user             User?     @relation(fields: [userId], references: [id])
  analyses         Analysis[]

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

enum AnalysisType {
  CV_ANALYSIS
  JOB_MATCH_ANALYSIS
}

model Analysis {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  type      AnalysisType
  status    String
  result    Json
  isGuest   Boolean      @default(false)
  expiresAt DateTime?

  // --- Relations ---
  userId    String?      @db.ObjectId
  user      User?        @relation(fields: [userId], references: [id])

  cvId      String       @db.ObjectId
  cv        CV           @relation(fields: [cvId], references: [id], onDelete: Cascade)

  jobDescriptionId String?      @db.ObjectId
  jobDescription   JobDescription? @relation(fields: [jobDescriptionId], references: [id], onDelete: Cascade)

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  EXPIRED
  CANCELLED
  REFUNDED
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId       String      @unique

  userId        String?     @db.ObjectId
  user          User?       @relation(fields: [userId], references: [id])

  amount        Int
  status        OrderStatus @default(PENDING)
  customerName  String?
  customerEmail String?
  customerPhone String?
  snapToken     String?
  transactionId String?
  paymentMethod String?
  paidAt        DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  events PaymentEvent[]
}

model PaymentEvent {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  orderId String
  order   Order  @relation(fields: [orderId], references: [orderId])

  type      String
  payload   Json
  createdAt DateTime @default(now())

  @@index([orderId])
}
